/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.balashov.torrent;

import com.google.common.base.Splitter;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Scanner;

public class App {
    private static void start(InputStream input, PrintStream output, String[] args) {
        TorrentCore core;
        try {
            core = new TorrentCore();
        } catch (IOException e) {
            output.println("Error reading from json config file. Downloads data corrupted");
            return;
        }

        try (Scanner scanner = new Scanner(input)) {
            while (true) {
                output.print("~~> ");
                switch (scanner.nextLine()) {
                    case "download" -> {
                        output.print  (" ==> Enter path to torrent file: ");
                        String torrentFilepath  = scanner.nextLine();
                        output.print  (" ==> Enter path to download folder: ");
                        String downloadFilepath = scanner.nextLine();
                        output.println(" ==> Enter list of ip with format 'ip:port', separated via space:");
                        output.print  (" ==> ");
                        ArrayList<String> ipList = new ArrayList<>(Splitter.on(' ')
                                .splitToList(scanner.nextLine()));
                        TorrentFileData torrentFileData = new TorrentFileData();
                        try {
                            torrentFileData.decode(torrentFilepath);
                            core.downloadTorrent(torrentFileData, downloadFilepath, ipList);
                            output.println(" ==> Downloading started");
                        } catch (TorrentCore.RecordException e) {
                            output.println("E==> Torrent already exists");
                        } catch (FileNotFoundException | SecurityException e) {
                            output.println("E==> Cannot download to that directory");
                        } catch (IOException e) {
                            output.println("E==> Torrent file damaged");
                        }
                    }
                    case "upload" -> {
                        core.uploadTorrents();
                        output.println(" ==> Started uploading torrents");
                    }
                    case "add" -> {
                        output.print(" ==> Enter path to torrent file: ");
                        String torrentFilePath = scanner.nextLine();
                        output.print(" ==> Enter path to downloaded file: ");
                        String instanceFilePath = scanner.nextLine();
                        TorrentFileData torrentFileData = new TorrentFileData();
                        try {
                            torrentFileData.decode(torrentFilePath);
                            core.addDownloadedTorrent(torrentFileData, instanceFilePath);
                            output.println(" ==> Added successfully");
                        } catch (IOException e) {
                            output.println("E==> Torrent file damaged");
                        } catch (TorrentCore.RecordException e) {
                            output.println("E==> Torrent already exists");
                        }
                    }
                    case "resume" -> {
                        ArrayList<NotCompleteDownloaded> list = core.getNotCompleteDownloadedList();
                        if (list.size() == 0) {
                            System.out.println("E==> Nothing can be downloaded");
                            break;
                        }
                        output.println(" ==> Select number you want to download");
                        for (int i = 0; i < list.size(); ++i) {
                            NotCompleteDownloaded element = list.get(i);
                            System.out.println(" ==> " + i + ": " + Math.round(element.downloadPercent() * 100. * 100.) / 100. + "% - " + element.name());
                        }
                        String value = scanner.nextLine();
                        int intValue = Integer.parseInt(value);
                        if (intValue >= list.size()) {
                            System.out.println("E==> Invalid number");
                            break;
                        }
                        output.println(" ==> Enter list of ip with format 'ip:port', separated via space:");
                        output.print  (" ==> ");
                        ArrayList<String> ipList = new ArrayList<>(Splitter.on(' ')
                                .splitToList(scanner.nextLine()));
                        core.resumeDownloading(list.get(intValue).infoHash(), ipList);
                    }
                    case "exit" -> {
                        throw new StopException();
                    }
                }
            }
        } catch (StopException e) {
            output.println(" ==> EXITING...");
            core.close();
        } catch (Exception e) {
            output.println("E==> Finished with errors: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        start(System.in, System.out, args);
    }

    public static class StopException extends Exception {

    }
}
