/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package interpreter;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.*;

import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import interpreter.Brainfuck.BrainfuckCreatingException;

class AppTest {
    static Brainfuck bf = null;
    
     @BeforeAll
     static void initBF() {
         assertDoesNotThrow(() -> { bf = new Brainfuck(); });
     }

    @BeforeEach
    void resetBF() throws BrainfuckCreatingException {
        bf = new Brainfuck();
        assertNotNull(bf);
        bf.reset();
    }

    @ParameterizedTest
    @ValueSource(strings = {"+", "-", ",", ".", ">", "<", "[]"})
    void inputSingleCommand(String code) {
        assertDoesNotThrow(() -> { bf.debug(code); });
    }

    @Test
    void factorial() {
        assertDoesNotThrow( ()-> {
            bf.debug("+++++[>+>>>+<<<<-]>--[[>+>+<<-]>>+<[<+>-]>[>[>>+>+<<<-]>>>[<<<+>>>-]<[<+>-]<<<-]>[-]>[<+>-]<<<<-]>>>.");
            bf.execute("");
        } );
        assertEquals(120, bf.getValue());
    }

    @Test
    void square() {
        assertDoesNotThrow( ()-> {
            bf.debug("++++++++++[>>+<<-]>>[-[>+<<<++>>-]<<+>>>[<+>-]<]<<.");
            bf.execute("");
        } );
        assertEquals(100, bf.getValue());
    }
}
